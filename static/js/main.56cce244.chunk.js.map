{"version":3,"sources":["components/Card.js","components/CardList.js","components/Match.js","components/MatchCard.js","components/Navigation.js","components/Profile.js","components/Register.js","components/SignIn.js","components/Standings.js","App.js","serviceWorker.js","index.js"],"names":["Card","hteam","ateam","id","team1","team2","hscore","ascore","winner","className","alt","src","CardList","matches","map","match","key","whoWon","MatchCard","props","onOptionChange","event","setState","target","value","needConfirm","onSubmitResult","state","fetch","method","headers","body","JSON","stringify","catch","err","console","log","alert","onScoreVerification","type","onChange","this","onClick","React","Component","Navigation","onRouteChange","isSignedIn","loginWithPopup","logout","username","style","display","justifyContent","returnTo","window","location","origin","Standings","useState","data","setData","useEffect","axios","get","then","title","columns","name","selector","sortable","right","theme","initState","route","user","email","App","useAuth0","isAuthenticated","loadUser","given_name","component","Boolean","hostname","ReactDOM","render","clientId","domain","redirectUri","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.56cce244.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ hteam, ateam, id, team1, team2, hscore, ascore, winner }) => {\r\n    return (\r\n        <div className='bg-gray br3 pa3 ma2 grow bw2 shadow-5 dt dt--fixed w-auto fl'>\r\n            <h1>Winner: <br/> {winner}</h1>\r\n            <div className='flex items-center'>\r\n                <img alt='team1' src={`https://robohash.org/${id}?size=50x50`} />\r\n                <div>\r\n                    <h2>{hscore} - </h2>\r\n                    <p>{team1} - </p>\r\n                    <p>{hteam} - </p>\r\n                </div>\r\n                <div>\r\n                    <h2>{ascore}</h2>\r\n                    <p>{team2}</p>\r\n                    <p>{ateam}</p>\r\n                    </div>\r\n                <img alt='team1' src={`https://robohash.org/${id+2}?size=50x50`} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n//test\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ matches }) => {\r\n    return (\r\n        <div className='flex'>\r\n            {\r\n                matches.map((match) => {\r\n                    return (\r\n                        <div>\r\n                        <Card \r\n                            key={match.id}\r\n                            hteam={match.hteam}\r\n                            ateam={match.ateam}\r\n                            hscore={match.hscore}\r\n                            ascore={match.ascore}\r\n                            team1={match.team1}\r\n                            team2={match.team2}\r\n                            winner={match.winner}\r\n                            />\r\n                        </div>\r\n                        );\r\n                    })\r\n                }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList;","//This function needs to set the new object's property to a string before \r\n//passing it to the Card component, or React won't render it.\r\n//Remember you won't be working with an array, but rather with a database\r\n//so you'll have to convert it to string before putting it into the database.\r\n\r\nconst whoWon = (match) => {\r\n   if (match.hscore > match.ascore) return match.hteam\r\n   else if (match.ascore > match.hscore) return match.ateam\r\n   else return 'tie'\r\n}\r\n\r\nexport var matches = [{\r\n   player1: 'Guido',\r\n   player2: 'Laucha',\r\n   team1: 'Liverpool',\r\n   team2: 'Manchester United',\r\n   team1result: 2,\r\n   team2result: 0,\r\n   winner: 'Guido',\r\n },\r\n {\r\n   player1: 'Imanol',\r\n   player2: 'Laucha',\r\n   team1: 'Boca',\r\n   team2: 'Racing',\r\n   team1result: 0,\r\n   team2result: 2,\r\n   winner: 'Laucha'\r\n}]\r\n\r\n\r\n\r\nexport default whoWon;\r\n","import React from \"react\";\r\nimport whoWon from \"./Match\";\r\n\r\nclass MatchCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hteam: \"\",\r\n      ateam: \"\",\r\n      team1: \"\",\r\n      team2: \"\",\r\n      hscore: 0,\r\n      ascore: 0,\r\n      winner: \"\",\r\n      needConfirm: false,\r\n    };\r\n  }\r\n\r\n  onOptionChange = (event) => {\r\n    this.setState({ [event.target.id]: event.target.value });\r\n    this.setState({ needConfirm: false });\r\n  };\r\n\r\n  onSubmitResult = () => {\r\n    const { hteam, ateam, team1, team2, hscore, ascore, winner } = this.state;\r\n    if (!hteam || !ateam || !team1 || !team2 || !winner) alert(\"Missing data\");\r\n    else {\r\n      fetch(\"https://peaceful-wildwood-69585.herokuapp.com/3001/matchload\", {\r\n        method: \"post\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          hteam: hteam,\r\n          ateam: ateam,\r\n          team1: team1,\r\n          team2: team2,\r\n          hscore: hscore,\r\n          ascore: ascore,\r\n          winner: winner,\r\n        }),\r\n      }).catch((err) => console.log(\"oops\"));\r\n      this.setState = {\r\n        hteam: \"\",\r\n        ateam: \"\",\r\n        team1: \"\",\r\n        team2: \"\",\r\n        hscore: 0,\r\n        ascore: 0,\r\n        winner: \"\",\r\n        needConfirm: false,\r\n      };\r\n      alert(\"Match loaded to database\");\r\n    }\r\n  };\r\n\r\n  onScoreVerification = () => {\r\n    this.setState({ winner: whoWon(this.state) });\r\n    this.setState({ needConfirm: true });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <article className=\"br3 white pa3 ma2 bw1 ba shadow-5 dt dt--fixed w-auto fl\">\r\n        <h1>Load Match</h1>\r\n        <main className=\"b flex pa2\">\r\n          <div>\r\n            <p>Player Name</p>\r\n            <input\r\n              type=\"text\"\r\n              id=\"hteam\"\r\n              onChange={this.onOptionChange}\r\n            ></input>\r\n            <p>Team</p>\r\n            <input\r\n              type=\"text\"\r\n              id=\"team1\"\r\n              onChange={this.onOptionChange}\r\n            ></input>\r\n            <p>Score</p>\r\n            <input\r\n              type=\"number\"\r\n              id=\"hscore\"\r\n              onChange={this.onOptionChange}\r\n            ></input>\r\n          </div>\r\n          <h2 className=\"pa3\">VS</h2>\r\n          <div>\r\n            <p>Player Name</p>\r\n            <input\r\n              type=\"text\"\r\n              id=\"ateam\"\r\n              onChange={this.onOptionChange}\r\n            ></input>\r\n            <p>Team</p>\r\n            <input\r\n              type=\"text\"\r\n              id=\"team2\"\r\n              onChange={this.onOptionChange}\r\n            ></input>\r\n            <p>Score</p>\r\n            <input\r\n              type=\"number\"\r\n              id=\"ascore\"\r\n              onChange={this.onOptionChange}\r\n            ></input>\r\n          </div>\r\n        </main>\r\n        <h2>Winner: {this.state.winner}</h2>\r\n        {!this.state.needConfirm ? (\r\n          <input\r\n            className=\"b br3 ph3 pv2 input-reset ba b--white white bg-transparent grow pointer f6 dib\"\r\n            type=\"submit\"\r\n            value=\"Submit\"\r\n            onClick={this.onScoreVerification}\r\n          />\r\n        ) : (\r\n          <input\r\n            className=\"b br3 ph3 pv2 input-reset ba b--white white bg-green grow pointer f6 dib\"\r\n            type=\"submit\"\r\n            value=\"Confirm\"\r\n            onClick={this.onSubmitResult}\r\n          />\r\n        )}\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MatchCard;\r\n","import React from \"react\";\r\n\r\nconst Navigation = ({\r\n  onRouteChange,\r\n  isSignedIn,\r\n  loginWithPopup,\r\n  logout,\r\n  username,\r\n}) => {\r\n  if (isSignedIn) {\r\n    return (\r\n      <nav style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n        <p className=\"f3 white pa3 absolute left-0\">Hello {username}</p>\r\n        <p\r\n          onClick={() => onRouteChange(\"home\")}\r\n          className=\"f3 link dim white underline pa3 pointer\"\r\n        >\r\n          Home\r\n        </p>\r\n        {/* <p\r\n          onClick={() => onRouteChange(\"profile\")}\r\n          className=\"f3 link dim white underline pa3 pointer\"\r\n        >\r\n          Profile\r\n        </p> */}\r\n        <p\r\n          onClick={() => onRouteChange(\"load\")}\r\n          className=\"f3 link dim white underline pa3 pointer\"\r\n        >\r\n          Load Match\r\n        </p>\r\n        <p\r\n          onClick={() => logout({ returnTo: window.location.origin })}\r\n          className=\"f3 link dim white underline pa3 pointer\"\r\n        >\r\n          Sign Out\r\n        </p>\r\n      </nav>\r\n    );\r\n  } else {\r\n    return (\r\n      <nav style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n        <p\r\n          onClick={() => onRouteChange(\"home\")}\r\n          className=\"f3 link dim white underline pa3 pointer\"\r\n        >\r\n          Home\r\n        </p>\r\n        <p\r\n          onClick={() => loginWithPopup()}\r\n          className=\"f3 link dim white underline pa3 pointer\"\r\n        >\r\n          Sign In\r\n        </p>\r\n      </nav>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Navigation;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"./CardList\";\r\nimport axios from \"axios\";\r\nconst capitalize = (string) => string.charAt(0).toUpperCase() + string.slice(1);\r\n\r\nclass Profile extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      matches: [],\r\n      stats: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let standingsCall = axios.get(\r\n      \"https://peaceful-wildwood-69585.herokuapp.com/standings\"\r\n    );\r\n    let matchesCall = axios.get(\r\n      \"https://peaceful-wildwood-69585.herokuapp.com/profile/\" +\r\n        this.props.user.name\r\n    );\r\n\r\n    Promise.all([standingsCall, matchesCall])\r\n      .then((values) => Promise.all(values.map((value) => value.data)))\r\n      .then((finalValues) => {\r\n        let standingsRes = finalValues[0];\r\n        let matchesRes = finalValues[1];\r\n        console.log(this.props.user.name, matchesRes, standingsRes);\r\n        this.setState({\r\n          matches: matchesRes.filter(\r\n            (x) =>\r\n              x.hteam === this.props.user.name ||\r\n              x.ateam === this.props.user.name\r\n          ),\r\n        });\r\n        this.setState({\r\n          stats: standingsRes.find(\r\n            (x) => x.name === capitalize(this.props.user.name)\r\n          ),\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { name } = this.props.user;\r\n    const { matches } = this.state;\r\n    return (\r\n      <div>\r\n        <h1>\r\n          Hi, {name}. {<br />}\r\n          These are your stats: {<br />}\r\n          These are your last 5 matches:\r\n        </h1>\r\n        <CardList matches={matches} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\n\r\nclass Register extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  onNameChange = (event) => {\r\n    this.setState({ name: event.target.value });\r\n  };\r\n\r\n  onEmailChange = (event) => {\r\n    this.setState({ email: event.target.value });\r\n  };\r\n\r\n  onPasswordChange = (event) => {\r\n    this.setState({ password: event.target.value });\r\n  };\r\n\r\n  onSubmitSignIn = () => {\r\n    fetch(\"https://peaceful-wildwood-69585.herokuapp.com/register\", {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        name: this.state.name,\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((user) => {\r\n        if (user.id) {\r\n          this.props.loadUser(user);\r\n          this.props.onRouteChange(\"home\");\r\n        }\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n        <main className=\"pa4 black-80\">\r\n          <div className=\"measure center\">\r\n            <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n              <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">\r\n                  Name\r\n                </label>\r\n                <input\r\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  id=\"name\"\r\n                  onChange={this.onNameChange}\r\n                />\r\n              </div>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">\r\n                  Email\r\n                </label>\r\n                <input\r\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"email\"\r\n                  name=\"email-address\"\r\n                  id=\"email-address\"\r\n                  onChange={this.onEmailChange}\r\n                />\r\n              </div>\r\n              <div className=\"mv3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">\r\n                  Password\r\n                </label>\r\n                <input\r\n                  className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  onChange={this.onPasswordChange}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <div className=\"\">\r\n              <input\r\n                onClick={this.onSubmitSignIn}\r\n                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                type=\"submit\"\r\n                value=\"Register\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </article>\r\n    );\r\n  }\r\n}\r\nexport default Register;\r\n","import React from \"react\";\r\n\r\nclass SignIn extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      signInEmail: \"\",\r\n      signInPassword: \"\",\r\n    };\r\n  }\r\n  onEmailChange = (event) => {\r\n    this.setState({ signInEmail: event.target.value });\r\n  };\r\n\r\n  onPasswordChange = (event) => {\r\n    this.setState({ signInPassword: event.target.value });\r\n  };\r\n\r\n  onSubmitSignIn = () => {\r\n    fetch(\"https://peaceful-wildwood-69585.herokuapp.com/signin\", {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        email: this.state.signInEmail,\r\n        password: this.state.signInPassword,\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((user) => {\r\n        if (user.id) {\r\n          this.props.loadUser(user);\r\n          this.props.onRouteChange(\"home\");\r\n        }\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { onRouteChange } = this.props;\r\n    return (\r\n      <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n        <main className=\"pa4 black-80\">\r\n          <div className=\"measure center\">\r\n            <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n              <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">\r\n                  Email\r\n                </label>\r\n                <input\r\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"email\"\r\n                  name=\"email-address\"\r\n                  id=\"email-address\"\r\n                  onChange={this.onEmailChange}\r\n                />\r\n              </div>\r\n              <div className=\"mv3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">\r\n                  Password\r\n                </label>\r\n                <input\r\n                  className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  onChange={this.onPasswordChange}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <div className=\"\">\r\n              <input\r\n                onClick={this.onSubmitSignIn}\r\n                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                type=\"submit\"\r\n                value=\"Sign in\"\r\n              />\r\n            </div>\r\n            <div className=\"lh-copy mt3\">\r\n              <p\r\n                onClick={() => onRouteChange(\"register\")}\r\n                href=\"#0\"\r\n                className=\"f6 link dim black db pointer\"\r\n              >\r\n                Register\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignIn;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport axios from \"axios\";\r\n\r\nconst Standings = () => {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://peaceful-wildwood-69585.herokuapp.com/standings\")\r\n      .then((data) => setData(data));\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  const columns = [\r\n    {\r\n      name: \"Name\",\r\n      selector: \"name\",\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Points\",\r\n      selector: \"points\",\r\n      sortable: true,\r\n      right: true,\r\n    },\r\n    {\r\n      name: \"P\",\r\n      selector: \"gamesPlayed\",\r\n      sortable: true,\r\n      right: true,\r\n    },\r\n    {\r\n      name: \"W\",\r\n      selector: \"gamesWon\",\r\n      sortable: true,\r\n      right: true,\r\n    },\r\n    {\r\n      name: \"D\",\r\n      selector: \"gamesTied\",\r\n      sortable: true,\r\n      right: true,\r\n    },\r\n    {\r\n      name: \"L\",\r\n      selector: \"gamesLost\",\r\n      sortable: true,\r\n      right: true,\r\n    },\r\n    {\r\n      name: \"%\",\r\n      selector: \"winpercent\",\r\n      sortable: true,\r\n      right: true,\r\n    },\r\n    {\r\n      name: \"GF\",\r\n      selector: \"goalsFor\",\r\n      sortable: true,\r\n      right: true,\r\n    },\r\n    {\r\n      name: \"GA\",\r\n      selector: \"goalsAgainst\",\r\n      sortable: true,\r\n      right: true,\r\n    },\r\n    {\r\n      name: \"GD\",\r\n      selector: \"goalDif\",\r\n      sortable: true,\r\n      right: true,\r\n    },\r\n  ];\r\n  return (\r\n    <DataTable\r\n      title=\"Standings\"\r\n      columns={columns}\r\n      data={data.data}\r\n      theme=\"dark\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Standings;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CardList from \"./components/CardList\";\r\nimport MatchCard from \"./components/MatchCard\";\r\nimport Navigation from \"./components/Navigation\";\r\nimport Profile from \"./components/Profile\";\r\nimport Register from \"./components/Register\";\r\nimport SignIn from \"./components/SignIn\";\r\nimport Standings from \"./components/Standings\";\r\nimport \"./App.css\";\r\nimport \"tachyons\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nconst initState = {\r\n  matches: [],\r\n  route: \"home\",\r\n  isSignedIn: false,\r\n  user: {\r\n    name: \"Guest\",\r\n    email: \"\",\r\n  },\r\n};\r\n\r\nconst App = () => {\r\n  const { loginWithPopup, logout, isAuthenticated, user } = useAuth0();\r\n  const [state, setState] = useState({\r\n    matches: [],\r\n    route: \"home\",\r\n    isSignedIn: isAuthenticated,\r\n    user: {\r\n      name: \"Guest\",\r\n      email: \"\",\r\n    },\r\n  });\r\n\r\n  const loadUser = (data) => {\r\n    if (data) {\r\n      setState({\r\n        ...state,\r\n        isSignedIn: isAuthenticated,\r\n        user: {\r\n          name: data.given_name,\r\n          email: data.email,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadUser(user);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [user]);\r\n\r\n  const onRouteChange = (route) => {\r\n    if (route === \"signout\") {\r\n      setState(initState);\r\n    } else if (route === \"home\") {\r\n      setState({ ...state, isSignedIn: true });\r\n    }\r\n    setState({ ...state, route: route });\r\n  };\r\n\r\n  let route = state.route;\r\n  let component;\r\n  switch (route) {\r\n    case \"home\":\r\n      component = <Standings />;\r\n      break;\r\n    case \"load\":\r\n      component = <MatchCard />;\r\n      break;\r\n    default: {\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App white\">\r\n      <Navigation\r\n        isSignedIn={state.isSignedIn}\r\n        onRouteChange={onRouteChange}\r\n        loginWithPopup={loginWithPopup}\r\n        logout={logout}\r\n        loadUser={loadUser}\r\n        username={state.user.name}\r\n      />\r\n      <div className=\"flex\">{component}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Auth0Provider } from \"@auth0/auth0-react\";\r\n\r\nReactDOM.render(\r\n  <Auth0Provider\r\n    clientId=\"6olnEN1eSbfsiKTF9iMFEeUJMDLY8Mtt\"\r\n    domain=\"dev-bowof--q.us.auth0.com\"\r\n    redirectUri={window.location.origin}\r\n  >\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Auth0Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}